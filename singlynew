#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
 
struct node
{
      int data;
      struct node *next;
};
 
struct node *start = NULL;
struct node *display();
struct node *insert_beg();
struct node *insert_end();
struct node *insert_before();
struct node *insert_after();
struct node *delete_beg();
struct node *delete_end();
struct node *delete_node();
struct node *delete_after();
struct node *delete_list();
struct node *insertmiddle();
int main()  
{
        int option;
do
{
    printf("\n\n *****MAIN MENU *****");
    printf("\n 1: Display the list");
    printf("\n 2: Add a node at the beginning");
    printf("\n 3: Add a node at the end");
    printf("\n 4: Add a node before a given node");
    printf("\n 5: Add a node after a given node");
    printf("\n 6: Delete a node from the beginning");
    printf("\n 7: Delete a node from the end");
    printf("\n 8: Delete a given node");
    printf("\n 9: Delete a node after a given node");
    printf("\n 10: insert middle");
     
    printf("\n\n Enter your option : ");
    scanf("%d”, &option);
                  
    switch(option)
    {
   
        case 1:display();
            break;
        case 2: insert_beg();
            break;
        case 3: insert_end();
            break;
        case 4: insert_before();
            break;
        case 5: insert_after();
            break;
        case 6: delete_beg();
            break;
        case 7: delete_end();
            break;
        case 8: delete_node();
            break;
        case 9:  delete_after();
            break;
        case 10: insertmiddle();
            break;
       
        default:
            printf("Wrong Choioc");
    }
}while(option !=13);
return 0;
}

    struct node *display()
    {
        struct node *ptr;
        ptr = start;
        while(ptr != NULL)
        {
            printf("\t %d", ptr -> data);
            ptr = ptr -> next;
        }
        return start;
    }
 
    struct node *insert_beg()
    {
        struct node *new_node;
        int num;
        printf("\n Enter the data : ");
        scanf("%d", &num);
        new_node = (struct node *)malloc(sizeof(struct node));
        new_node -> data = num;
        new_node -> next = start;
        start = new_node;
    
        display();
    }
 
    struct node *insert_end()
    {
        struct node *ptr, *new_node;
        int num;
        printf("\n Enter the data : ");
        scanf("%d", &num);
        new_node = (struct node *)malloc(sizeof(struct node));
        new_node -> data = num;
        new_node -> next = NULL;
        ptr = start;
        while(ptr -> next != NULL)
        ptr = ptr -> next;
        ptr -> next = new_node;
        
        display();
    }
 
    struct node *insert_before()
    {
        struct node *new_node, *ptr, *preptr;
        int num, val;
        printf("\n Enter the data : ");
        scanf("%d", &num);
        printf("\n Enter the value before which the data has to be inserted : ");
        scanf("%d", &val);
        new_node = (struct node *)malloc(sizeof(struct node));
        new_node -> data = num;
        ptr = start;
        while(ptr -> data != val)
        {
            preptr = ptr;
            ptr = ptr -> next;
        }
        preptr -> next = new_node;
        new_node -> next = ptr;
       
       display();
    }
 
    struct node *insert_after()
    {
        struct node *new_node, *ptr, *preptr;
        int num, val;
        printf("\n Enter the data : ");
        scanf("%d", &num);
        printf("\n Enter the value after which the data has to be inserted : ");
        scanf("%d", &val);
        new_node = (struct node *)malloc(sizeof(struct node));
        new_node -> data = num;
        ptr = start;
        preptr = ptr;
        while(preptr -> data != val)
        {
            preptr = ptr;
            ptr = ptr -> next;
        }
        preptr -> next=new_node;
        new_node -> next = ptr;
       
       display();
    }
 
        struct node *delete_beg()
        {
            struct node *ptr;
            ptr = start;
            start = start -> next;
            free(ptr);
            
            display();
        }
 
        struct node *delete_end()
        {
            struct node *ptr, *preptr;
            ptr = start;
            while(ptr -> next != NULL)
            {
                preptr = ptr;
                ptr = ptr -> next;
            }
            preptr -> next = NULL;
            free(ptr);
            
            display();
        }
 
        struct node *delete_node()
        {
        struct node *ptr, *preptr;
        int val;
        printf("\n Enter the value of the node which has to be deleted : ");
        scanf("%d", &val);
        ptr = start;
        if(ptr -> data == val)
        {
            start = delete_beg(start);
            
            display();
        }
        else
        {
            while(ptr -> data != val)
            {
                preptr = ptr;
                ptr = ptr -> next;
            }
            preptr -> next = ptr -> next;
            free(ptr);
            
            display();
        }
        }
 
struct node *delete_after()
{
    struct node *ptr, *preptr;
    int val;
    printf("\n Enter the value after which the node has to be deleted: ");
    scanf("%d", &val);
    ptr = start;
    while (ptr != NULL && ptr->data != val) {
        preptr = ptr;
        ptr = ptr->next;
    }
    if (ptr == NULL || ptr->next == NULL) {
        printf("\n No node found after the given value.");
        return start;
    }
    preptr = ptr;
    ptr = ptr->next;
    preptr->next = ptr->next;
    free(ptr);
    display();
    return start;
}

struct node *insertmiddle(){
    struct node *new_node, *ptr, *preptr;
    int pos, num;
    printf("Enter the position at which the new node has to be inserted: ");
    scanf("%d", &pos);
    printf("Enter the data for the new node: ");
    scanf("%d", &num);

    new_node = (struct node *)malloc(sizeof(struct node));
    new_node->data = num;

    ptr = start;
    int i = 1;
    while (i < pos && ptr != NULL) {
        preptr = ptr;
        ptr = ptr->next;
        i++;
    }

    if (ptr == NULL) {
        printf("Position out of range.\n");
        return NULL;
    }

    new_node->next = ptr;
    preptr->next = new_node;
               
    display();

    return start;
}
